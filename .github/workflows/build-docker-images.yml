name: Build Docker Images

on:
  workflow_dispatch:
    inputs:
      directory:
        description: 'Directory to build Docker image'
        required: false
      platforms:
        description: 'Platforms to build for (e.g., linux/amd64,linux/arm64)'
        required: false
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  DOCKER_ORG: chtsen-sysnc

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to private Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_ALIYUN_USER }}
          password: ${{ secrets.DOCKER_ALIYUN_PW }}

      - name: Get list of Dockerfiles
        id: dockerfiles
        run: |
          if [ -z "${{ github.event.inputs.directory }}" ]; then
            files=$(find . -name 'Dockerfile')
          else
            files=${{ github.event.inputs.directory }}/Dockerfile
          fi
          echo "files=$files" >> $GITHUB_ENV

      - name: Build and Push Docker images
        run: |
          for file in ${{ env.files }}; do
            if [ -f "$file" ]; then
              dir=$(dirname "$file")
              image_name=$(basename "$dir")
              
              # Extract the tag from the FROM line in the Dockerfile
              from_tag=$(grep '^FROM' "$file" | awk -F':' '{print $NF}' | head -n 1)

              if [ -z "$from_tag" ]; then
                echo "No FROM tag found in $file, skipping."
                continue
              fi

              tag="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/${image_name}:${from_tag}"

              echo "Building Docker image for $file with tag $tag"
              docker buildx build --platform "${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}" --push -t "$tag" "$dir"
            else
              echo "Dockerfile $file not found, skipping."
            fi
          done
        env:
          files: ${{ env.files }}
