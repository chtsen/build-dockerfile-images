name: Build Docker Images

on:
  workflow_dispatch:
    inputs:
      directory:
        description: 'Directory to build Docker image'
        required: false
      platforms:
        description: 'Platforms to build for (e.g., linux/amd64,linux/arm64)'
        required: false
      tag:
        description: 'Tag to build Docker image'
        required: false
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  DOCKER_ORG: chtsen-temp

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to private Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_ALIYUN_USER }}
          password: ${{ secrets.DOCKER_ALIYUN_PW }}

      - name: Get list of Dockerfiles
        id: dockerfiles
        run: |
          if [ -z "${{ github.event.inputs.directory }}" ]; then
            files=$(find . -name 'Dockerfile' -print)
          else
            files=$(find "${{ github.event.inputs.directory }}" -name 'Dockerfile' -print)
          fi
          files=$(echo "$files" | tr '\n' ' ')
          echo "::set-output name=files::$files"

      - name: Build å’Œ Push Docker images
        run: |
          IFS=' ' read -r -a files <<< "${{ steps.dockerfiles.outputs.files }}"
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              dir=$(dirname "$file")
              image_name=$(basename "$dir")
              
              # Extract the tag from the FROM line in the Dockerfile
              if [ -z "${{ github.event.inputs.tag }}" ]; then           
                from_tag=$(grep '^FROM' "$file" | awk -F':' '{print $NF}' | tail -n 1)
              else
                from_tag=${{ github.event.inputs.tag }}
              fi
              
              if [ -z "$from_tag" ]; then
                echo "No FROM tag found in $file, skipping."
                continue
              fi

              image="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/${image_name}:${from_tag}"

              echo "Building Docker image for $file with tag $tag"
              docker buildx build --platform "${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}" --push -t "$image"  -f "$dir"/Dockerfile .
            else
              echo "Dockerfile $file not found, skipping."
            fi
          done
